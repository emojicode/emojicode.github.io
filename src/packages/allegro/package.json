{"documentation":"\n  The Allegro package offers graphics, sounds and input APIs to create simple\n  games.\n","valueTypes":[{"name": "🎨","conformsTo":[],"genericArguments":[],"documentation":"\n  🎨 represents a color.\n","methods":[],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"documentation":"\n    Creates a color from the given RGBA. *r*, *g*, *b* and *a* must be a value\n    from 0 to 255.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"r"},{"type":{"package":"s","name":"🚂","optional":false},"name":"g"},{"type":{"package":"s","name":"🚂","optional":false},"name":"b"},{"type":{"package":"s","name":"🚂","optional":false},"name":"a"}]}],"typeMethods":[]}],"classes":[{"name": "🖼","conformsTo":[],"genericArguments":[],"documentation":" 🖼 represents a bitmap. ","methods":[],"initializers":[{"name":"📄","access":"🔓","errorType":{"package":"allegro","name":"🌩","optional":false},"genericArguments":[],"documentation":" Creates a bitmap from the image at the given path. ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"path"}]},{"name":"🆕","access":"🔓","errorType":{"package":"allegro","name":"🌩","optional":false},"genericArguments":[],"documentation":" Creates a bitmap with the given height and width. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"width"},{"type":{"package":"s","name":"🚂","optional":false},"name":"height"}]}],"typeMethods":[]},{"name": "🕉","conformsTo":[],"genericArguments":[],"documentation":"\n  🕉 represents a font. 🕉 can be used in conjunction with\n  [🏔🔡](t5535657300.html#cm🔡) to draw texts to a drawing target.\n","methods":[],"initializers":[{"name":"📄","access":"🔓","errorType":{"package":"allegro","name":"🌩","optional":false},"genericArguments":[],"documentation":"\n    Loads a TrueType font from the given path using the FreeType library.\n\n    The *size* parameter determines the size the font will be rendered at,\n    specified in pixels. The standard font size is measured in units per EM, if\n    you instead want to specify the size as the total height of glyphs in\n    pixels, pass it as a negative value.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"path"},{"type":{"package":"s","name":"🚂","optional":false},"name":"size"}]}],"typeMethods":[]},{"name": "🎉","conformsTo":[],"genericArguments":[],"documentation":" 🎉 represents an event. You’ll always receive subclasses of this class. ","methods":[],"initializers":[],"typeMethods":[]},{"name": "📩","conformsTo":[],"genericArguments":[],"documentation":" 📩 is an event that occurs when a character was typed on the keyboard. ","methods":[{"name":"📟","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the keycode associated with this event. ","arguments":[]},{"name":"🔣","access":"🔓","returnType":{"package":"s","name":"🔣","optional":true},"genericArguments":[],"documentation":"\n    Returns the symbol that was typed. This may be ✨ if the pressed key cannot\n    be represented as a symbol, e.g. if an arrow key was pressed.\n  ","arguments":[]},{"name":"🔃","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether the character was repeated. ","arguments":[]}],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🎉"}},{"name": "📥","conformsTo":[],"genericArguments":[],"documentation":" 📥 is an event that occurs when a keyboard key was pressed. ","methods":[{"name":"📟","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the keycode associated with this event. ","arguments":[]}],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🎉"}},{"name": "📤","conformsTo":[],"genericArguments":[],"documentation":" 📤 is an event that occurs when a keyboard key was released. ","methods":[{"name":"📟","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the keycode associated with this event. ","arguments":[]}],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🎉"}},{"name": "🖱","conformsTo":[],"genericArguments":[],"documentation":" 🖱 is a mouse event. You’ll always receive subclasses of this class. ","methods":[{"name":"👉","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the x coordinate. ","arguments":[]},{"name":"👇","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the y coordinate. ","arguments":[]}],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🎉"}},{"name": "❇","conformsTo":[],"genericArguments":[],"documentation":" ❇️ is an event that occurs when one or more mouse axis changed. ","methods":[],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🖱"}},{"name": "🔛","conformsTo":[],"genericArguments":[],"documentation":" 🔛 is an event that occurs when a mouse button was pressed. ","methods":[],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🖱"}},{"name": "🔝","conformsTo":[],"genericArguments":[],"documentation":" 🔝 is an event that occurs when a mouse button was released. ","methods":[],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🖱"}},{"name": "🛎","conformsTo":[],"genericArguments":[],"documentation":" 🛎 is an event that occurs for each ⏲ tick. ","methods":[],"initializers":[],"typeMethods":[],"superclass":{"package":"allegro","name":"🎉"}},{"name": "⏲","conformsTo":[],"genericArguments":[],"documentation":" ⏲ represents a timer that sends an event in a specified interval. ","methods":[{"name":"🏁","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Starts the timer. From then, the timer's counter will increment at a\n    constant rate, and it will begin generating events. Starting a timer that\n    is already started does nothing.\n  ","arguments":[]},{"name":"🚦","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Resume the timer specified. From then, the timer's counter will increment at\n    a constant rate, and it will begin generating events. Resuming a timer\n    that is already started does nothing. Resuming a stopped timer will not\n    reset the timer's counter.\n  ","arguments":[]},{"name":"⛔","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Stop the timer specified. The timer's counter will stop incrementing and it\n    will stop generating events. Stopping a timer that is already stopped does\n    nothing.\n  ","arguments":[]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"documentation":"\n    Creates a new, stopped timer that ticks every *seconds* seconds.\n    Seconds must be positive.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"seconds"}]}],"typeMethods":[]},{"name": "🗃","conformsTo":[],"genericArguments":[],"documentation":"\n  🗃 represents an event queue. An 🗃 instance holds events that have been\n  generated by event sources that are registered with the queue. Events are\n  stored in the order they are generated. Access is in a strictly FIFO\n  (first-in-first-out) order.\n","methods":[{"name":"⏳","access":"🔓","returnType":{"package":"allegro","name":"🎉","optional":false},"genericArguments":[],"documentation":" Waits for an event and returns it. ","arguments":[]},{"name":"🖱","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Registers the mouse as an event source. ","arguments":[]},{"name":"⌨","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Registers the keyboard as an event source. ","arguments":[]},{"name":"⏲","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Registers a ⏲ instance as an event source. ","arguments":[{"type":{"package":"allegro","name":"⏲","optional":false},"name":"timer"}]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"documentation":" Creates a new, empty event queue. ","arguments":[]}],"typeMethods":[]},{"name": "🎶","conformsTo":[],"genericArguments":[],"documentation":" 🎶 represents an audio sample. ","methods":[{"name":"🏁","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Starts playing the sample. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"volume"},{"type":{"package":"s","name":"🚀","optional":false},"name":"pan"},{"type":{"package":"s","name":"🚀","optional":false},"name":"speed"}]}],"initializers":[{"name":"📄","access":"🔓","errorType":{"package":"allegro","name":"🌩","optional":false},"genericArguments":[],"documentation":"\n    Loads the sample from the file at the given path. Depending on what\n    libraries are available, the full set of recognised extensions is: .wav,\n    .flac, .ogg, .it, .mod, .s3m, .xm.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"path"}]}],"typeMethods":[]},{"name": "📺","conformsTo":[],"genericArguments":[],"documentation":"\n  📺 represents a display.\n\n  All drawing operations end up being visible on a display which is the same as\n  a window in windowed environments. Thus, before anything is displayed, a\n  display needs to be created.\n","methods":[{"name":"🏷","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Sets the the title of the window. ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"title"}]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"documentation":" Creates a display with the given width and height. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"width"},{"type":{"package":"s","name":"🚂","optional":false},"name":"height"}]}],"typeMethods":[]},{"name": "🏔","conformsTo":[],"genericArguments":[],"documentation":"\n  🏔 represents the application.\n","methods":[{"name":"🎦","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    *Flips* the drawing target display. Copies or updates the front and back\n    buffers so that what has been drawn previously on the drawing target display\n    becomes visible on screen.\n  ","arguments":[]},{"name":"🏓","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Sets *bitmap* as the current drawing target. ","arguments":[{"type":{"package":"allegro","name":"🖼","optional":false},"name":"bitmap"}]},{"name":"🏏","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Sets the bitmap acting as backbuffer of *display* as the current drawing\n    target.\n  ","arguments":[{"type":{"package":"allegro","name":"📺","optional":false},"name":"display"}]},{"name":"🚿","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Fills the entire drawing target with the given color. ","arguments":[{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"🖍","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws a line between the two points ((*x1*|*y1*) and (*x2*|*y2*)).\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"thickness"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"📐","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws an outlined triangle between the given three points ((*x1*|*y1*),\n    (*x2*|*y2*) and (*x3*|*y3*)).\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x3"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y3"},{"type":{"package":"s","name":"🚀","optional":false},"name":"thickness"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"🚩","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws a filled triangle between the given three points ((*x1*|*y1*),\n    (*x2*|*y2*) and (*x3*|*y3*)).\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x3"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y3"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"📋","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws an outlined rectangle between the two points ((*x1*|*y1*) and\n    (*x2*|*y2*)) which are the upper left and lower right point of the rectangle\n    respectively.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"thickness"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"🗄","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws a filled rectangle between the two points ((*x1*|*y1*) and\n    (*x2*|*y2*)) which are the upper left and lower right point of the rectangle\n    respectively.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y2"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"⚽","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws an outlined circle. The center of the circle is the given point\n    ((*x1*|*y1*) and the radius is *r*.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"r"},{"type":{"package":"s","name":"🚀","optional":false},"name":"thickness"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"🏀","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws a filled circle. The center of the circle is the given point\n    (*x1*|*y1*) and the radius is *r*.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"r"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"🏉","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws an outlined rectangle with rounded corners between the two points\n    ((*x1*|*y1*) and (*x2*|*y2*)) which are the upper left and lower right point\n    of the rectangle respectively.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"rx"},{"type":{"package":"s","name":"🚀","optional":false},"name":"ry"},{"type":{"package":"s","name":"🚀","optional":false},"name":"thickness"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"🏈","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws a filled rectangle with rounded corners between the two points\n    ((*x1*|*y1*) and (*x2*|*y2*)) which are the upper left and lower right point\n    of the rectangle respectively.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"x1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y1"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y2"},{"type":{"package":"s","name":"🚀","optional":false},"name":"rx"},{"type":{"package":"s","name":"🚀","optional":false},"name":"ry"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]},{"name":"📼","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws the given bitmap at the given location.\n  ","arguments":[{"type":{"package":"allegro","name":"🖼","optional":false},"name":"bitmap"},{"type":{"package":"s","name":"🚀","optional":false},"name":"dx"},{"type":{"package":"s","name":"🚀","optional":false},"name":"dy"}]},{"name":"💽","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws a scaled and cropped version of the given bitmap at the given\n    location.\n  ","arguments":[{"type":{"package":"allegro","name":"🖼","optional":false},"name":"bitmap"},{"type":{"package":"s","name":"🚀","optional":false},"name":"sx"},{"type":{"package":"s","name":"🚀","optional":false},"name":"sy"},{"type":{"package":"s","name":"🚀","optional":false},"name":"sw"},{"type":{"package":"s","name":"🚀","optional":false},"name":"sh"},{"type":{"package":"s","name":"🚀","optional":false},"name":"dx"},{"type":{"package":"s","name":"🚀","optional":false},"name":"dy"},{"type":{"package":"s","name":"🚀","optional":false},"name":"dw"},{"type":{"package":"s","name":"🚀","optional":false},"name":"dh"}]},{"name":"🔡","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Draws the given text at the given position in the given font and color.\n  ","arguments":[{"type":{"package":"allegro","name":"🕉","optional":false},"name":"font"},{"type":{"package":"s","name":"🔡","optional":false},"name":"text"},{"type":{"package":"s","name":"🚀","optional":false},"name":"x"},{"type":{"package":"s","name":"🚀","optional":false},"name":"y"},{"type":{"package":"allegro","name":"⚖","optional":false},"name":"align"},{"type":{"package":"allegro","name":"🎨","optional":false},"name":"color"}]}],"initializers":[],"typeMethods":[{"name":"🙋","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    You must call this method before using any of the other methods as it\n    initializes the system. The callback will be called and passed an instance\n    of 🏔 once the application is ready.\n  ","arguments":[{"type":{"package":"","name":"🍇🏔➡️✨🍉","optional":false},"name":"main"}]}]}],"enums": [{"name": "🌩","conformsTo":[],"genericArguments":[],"documentation":" Errors ","methods":[],"initializers":[],"typeMethods":[],"values":[{"documentation":" Indicates a generic error. ","value":"⁉"},{"documentation":" Mathematics argument out of domain of function. ","value":"➗"},{"documentation":" Not enough space. ","value":"🐁"},{"documentation":" Result too large. ","value":"🗻"},{"documentation":" File exists ","value":"🗿"},{"documentation":" Function not supported. ","value":"🙅"},{"documentation":" Permission denied ","value":"🚧"},{"documentation":" Invalid argument. ","value":"🚯"},{"documentation":" Operation not permitted. ","value":"🚷"},{"documentation":" Illegal byte sequence. ","value":"🛃"}]},{"name": "⚖","conformsTo":[],"genericArguments":[],"documentation":" ⚖ provides values to align text ","methods":[],"initializers":[],"typeMethods":[],"values":[{"documentation":" Centers the text. ","value":"↔"},{"documentation":" Aligns text to the right. ","value":"➡"},{"documentation":" Aligns text to the left. ","value":"⬅"}]}],"protocols":[]}