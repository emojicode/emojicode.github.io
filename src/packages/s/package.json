{"documentation":"\n  The s package is Emojicode’s standard library.\n","valueTypes":[{"name": "👌","conformsTo":[{"package":"s","name":"😛🐚👌","optional":false}],"genericArguments":[],"documentation":"\n  Boolean\n","methods":[{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether this value and *other* are considered equal. ","arguments":[{"type":{"package":"s","name":"👌","optional":false},"name":"other"}]},{"name":"🎊","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Logical and. Returns true if both, the receiver and other, are true. ","arguments":[{"type":{"package":"s","name":"👌","optional":false},"name":"other"}]},{"name":"🎉","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Logical or. Returns true if the receiver or other or both are true. ","arguments":[{"type":{"package":"s","name":"👌","optional":false},"name":"other"}]},{"name":"❎","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":"\n    Inverts the boolean. Returns true if the boolean is false, and false if the\n    boolean is true.\n  ","arguments":[]},{"name":"😛😛","access":"🔒","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"👌","optional":false},"name":"other"}]}],"initializers":[],"typeMethods":[]},{"name": "🚂","conformsTo":[{"package":"s","name":"😛🐚🚂","optional":false}],"genericArguments":[],"documentation":"\n  Integer\n","methods":[{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether this value and *other* are considered equal. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"➖","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the receiver minus *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"➕","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the receiver plus *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"➗","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the receiver divided by *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"✖","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the receiver multiplied by *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"🚮","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the receiver modulus *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"◀","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is smaller than *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"▶","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is greater than *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"⬅","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is smaller than or equal to *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"➡","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is greater than or equal to *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"⭕","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns this integer AND *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"💢","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns this integer OR *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"❌","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns this integer XOR *other*. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]},{"name":"🚫","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns NOT applied to this integer. ","arguments":[]},{"name":"👈","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Shifts this integer by *n* bits to the left. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"n"}]},{"name":"👉","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Shifts this integer by *n* bits to the right. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"n"}]},{"name":"🏧","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the absolute value of this 🚂. ","arguments":[]},{"name":"🔡","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":"\n    Creates a string representation of this integer. *base* must be greater than\n    or equal to 2 and less than or equal to 35.\n\n    The digits used to represent the integer are\n    `0123456789abcdefghijklmnopqrstuvxyz`.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"base"}]},{"name":"🚀","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the double representation of this integer. ","arguments":[]},{"name":"😛😛","access":"🔒","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"other"}]}],"initializers":[],"typeMethods":[]},{"name": "🚀","conformsTo":[{"package":"s","name":"😛🐚🚀","optional":false}],"genericArguments":[],"documentation":"\n  Double\n","methods":[{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether this value and *other* are considered equal. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"➖","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the receiver minus *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"➕","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the receiver plus *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"➗","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the receiver divided by *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"✖","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the receiver multiplied by *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"🚮","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the floating-point remainder of the division operation\n    `receiver\/other`. This will always be the value of `receiver - n*other` and\n    will always have the same sign as the receiver.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"◀","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is smaller than *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"▶","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is greater than *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"⬅","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is smaller than or equal to *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"➡","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns true if the receiver is greater than or equal to *other*. ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]},{"name":"🏧","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":" Returns the absolute value of this 🚀. ","arguments":[]},{"name":"📓","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the sine of this 🚀.\n  ","arguments":[]},{"name":"📕","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the cosine of this 🚀.\n  ","arguments":[]},{"name":"📘","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the tangent of this 🚀.\n  ","arguments":[]},{"name":"📔","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the arcsine of this 🚀.\n  ","arguments":[]},{"name":"📙","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the arccosine of this 🚀.\n  ","arguments":[]},{"name":"📗","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the arctangent of this 🚀.\n  ","arguments":[]},{"name":"🏂","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns this 🚀 to the exponent power, that is, base<sup>exponent<\/sup>.\n  ","arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"exponent"}]},{"name":"⛷","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the positive square root of this 🚀.\n  ","arguments":[]},{"name":"🚴","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Returns the smallest integer greater than or equal to this 🚀.\n  ","arguments":[]},{"name":"🚵","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Returns the largest integer less than or equal to this 🚀.\n  ","arguments":[]},{"name":"🏇","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Returns the value of this 🚀 rounded to the nearest integer.\n\n    If the fractional portion of this 🚀 is 0.5 or greater, the argument is\n    rounded to the next higher integer. If the fractional portion of this 🚀 is\n    less than 0.5, the argument is rounded to the next lower integer.\n  ","arguments":[]},{"name":"🚣","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the base 2 logarithm of this 🚀.\n  ","arguments":[]},{"name":"🏄","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns the natural (base ℇ) logarithm of this 🚀.\n  ","arguments":[]},{"name":"🔡","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":"\n    Creates a 🔡 representation of this 🚀 and the given precision – the number\n    of digits after the decimal separator “.”.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"precision"}]},{"name":"😛😛","access":"🔒","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"🚀","optional":false},"name":"other"}]}],"initializers":[],"typeMethods":[{"name":"⚾","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns an approximation of 𝜋.\n  ","arguments":[]},{"name":"🏉","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns an approximation of 𝜏 which is equal to 𝜋\/2.\n  ","arguments":[]},{"name":"🎾","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns an approximation of 𝜏\/2 which is equal to 𝜋\/4.\n  ","arguments":[]},{"name":"🏹","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Returns an approximation of ℇ (Euler’s number).\n  ","arguments":[]}]},{"name": "🔣","conformsTo":[{"package":"s","name":"😛🐚🔣","optional":false}],"genericArguments":[],"documentation":"\n  Symbol\n","methods":[{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether this value and *other* are considered equal. ","arguments":[{"type":{"package":"s","name":"🔣","optional":false},"name":"other"}]},{"name":"🔡","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":" Creates a 🔡 from this symbol. ","arguments":[]},{"name":"🚂","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the Unicode code point of this symbol. ","arguments":[]},{"name":"😛😛","access":"🔒","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"🔣","optional":false},"name":"other"}]}],"initializers":[],"typeMethods":[]},{"name": "⏩","conformsTo":[{"package":"s","name":"🔂🐚🚂","optional":false},{"package":"s","name":"🐽🐚🚂","optional":false}],"genericArguments":[],"documentation":"\n  Represents a range which per definition is an immutable sequence of\n  numbers. [Read more in the\n  language reference.](..\/..\/reference\/the-s-package.html#-ranges)\n","methods":[{"name":"🐽","access":"🔓","returnType":{"package":"s","name":"🚂","optional":true},"genericArguments":[],"documentation":"\n    Returns the `n`th element of the range. `n` is only valid if\n    `start + step * n` is `>= start` and `< stop`. If `n` is invalid\n    Nothingness is returned.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"n"}]},{"name":"🐔","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the number of numbers in this range. ","arguments":[]},{"name":"🍡","access":"🔓","returnType":{"package":"s","name":"🌳🐚🚂","optional":false},"genericArguments":[],"documentation":" Returns an iterator to iterate over the symbols of this string. ","arguments":[]},{"name":"🔂🍡","access":"🔒","returnType":{"package":"s","name":"🍡🐚🚂","optional":false},"genericArguments":[],"arguments":[]},{"name":"🐽🐽","access":"🔒","returnType":{"package":"s","name":"🚂","optional":true},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]}],"initializers":[{"name":"⏩","access":"🔓","genericArguments":[],"documentation":"\n    Creates a range from start to stop.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"start"},{"type":{"package":"s","name":"🚂","optional":false},"name":"stop"}]},{"name":"⏭","access":"🔓","genericArguments":[],"documentation":"\n    Creates a range from start to stop with the given step.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"start"},{"type":{"package":"s","name":"🚂","optional":false},"name":"stop"},{"type":{"package":"s","name":"🚂","optional":false},"name":"step"}]}],"typeMethods":[]}],"classes":[{"name": "🔡","conformsTo":[{"package":"s","name":"🔂🐚🔣","optional":false},{"package":"s","name":"🐽🐚🔣","optional":false},{"package":"s","name":"😛🐚🔡","optional":false}],"genericArguments":[],"documentation":"\n  The 🔡 class represents a string. [Read more in the language reference.](..\/..\/reference\/the-s-package.html#-strings)\n","methods":[{"name":"😀","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Puts this 🔡 to the standard output. ","arguments":[]},{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns 👍 if this 🔡 is equal to b. ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"b"}]},{"name":"↔","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Compares this string to `b` and returns -1, 0, or 1 depending on whether\n    this string is less than, equal to, or greater than `b`.\n\n    >!N Note that this method compares the strings byte per byte\n    >!N and is only meant for use with non-localized sorting. The results of\n    >!N the sort will always be the same, but may not appear logical to human\n    >!N beings.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"b"}]},{"name":"🔪","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":"\n    Returns the characters in a string beginning at the specified location\n    through the specified number of characters.\n\n    from: Location at which to begin extracting characters. If a negative number\n    is given, it is treated as strLength + start where strLength = to the length\n    of the string (for example, if start is -3 it is treated as strLength - 3.)\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"from"},{"type":{"package":"s","name":"🚂","optional":false},"name":"length"}]},{"name":"🔍","access":"🔓","returnType":{"package":"s","name":"🚂","optional":true},"genericArguments":[],"documentation":"\n    Finds the first occurrences of a string in this string. Search is done from\n    left to right. Nothingness is returned if *search* cannot be found.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"search"}]},{"name":"🎼","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether this strings begins with another string. ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"testString"}]},{"name":"⛳","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether this strings ends with another string. ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"testString"}]},{"name":"🔧","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":"\n    The 🔧 method returns a new string, on which whitespace has been removed\n    from both ends of a string.\n  ","arguments":[]},{"name":"🔫","access":"🔓","returnType":{"package":"s","name":"🍨🐚🔡","optional":false},"genericArguments":[],"documentation":"\n    This string is split up into substring at each place *seperator* is found.\n    *seperator* itself is removed from the string.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"separator"}]},{"name":"💣","access":"🔓","returnType":{"package":"s","name":"🍨🐚🔡","optional":false},"genericArguments":[],"documentation":"\n    This string is split up into substring at each place *seperator* is found.\n    *seperator* itself is removed from the string.\n\n    Prefer this method over `🔫` if the separator is just a single character.\n  ","arguments":[{"type":{"package":"s","name":"🔣","optional":false},"name":"separator"}]},{"name":"🐔","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    This method returns the number of Unicode code points of this string. This\n    is possibly not the number of bytes needed to write the string to a file,\n    since Emojicode encodes everything into UTF8.\n  ","arguments":[]},{"name":"📐","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Returns the number of bytes needed to encode this string into proper UTF8.\n  ","arguments":[]},{"name":"🚂","access":"🔓","returnType":{"package":"s","name":"🚂","optional":true},"genericArguments":[],"documentation":"\n    This methods tries to construct an integer from this string in the given\n    base. It returns the integer or Nothingness if the string does not match the\n    regular expression `[+-]?[0-9a-zA-Z]+` or it does not represent a valid\n    value in the given base.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"base"}]},{"name":"🚀","access":"🔓","returnType":{"package":"s","name":"🚀","optional":true},"genericArguments":[],"documentation":"\n    This methods tries to construct a 🚀 from this 🔡. It returns the 🚀, or ✨\n    if the 🔡 does not match the regular expression\n    `[+-]?([0-9]+(\\.[0-9]*)?|[0-9]*\\.[0-9]+)([eE][+-]?[0-9]+)?`\n    or if it does not represent a valid 🚀.\n  ","arguments":[]},{"name":"📝","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":" Creates a new string by appending *symbol*. ","arguments":[{"type":{"package":"s","name":"🔣","optional":false},"name":"symbol"}]},{"name":"🐽","access":"🔓","returnType":{"package":"s","name":"🔣","optional":true},"genericArguments":[],"documentation":" Gets a symbol by its index. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]},{"name":"📇","access":"🔓","returnType":{"package":"s","name":"📇","optional":false},"genericArguments":[],"documentation":" Converts the string to data encoded as UTF8. ","arguments":[]},{"name":"🎶","access":"🔓","returnType":{"package":"s","name":"🍨🐚🔣","optional":false},"genericArguments":[],"documentation":" Returns an array with the symbols from this string. ","arguments":[]},{"name":"📰","access":"🔓","returnType":{"package":"","name":"⚪️","optional":false},"genericArguments":[],"documentation":"\n    Tries to parse this string as JSON. If the string doesn’t represent valid\n    JSON Nothigness is returned. The depth is limited to 256 levels.\n  ","arguments":[]},{"name":"📫","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":"\n    Returns a new string in which at least all letters contained in ASCII\n    were converted to uppercase.\n  ","arguments":[]},{"name":"📪","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":"\n    Returns a new string in which at least all letters contained in ASCII\n    were converted to lowercase.\n  ","arguments":[]},{"name":"🍡","access":"🔓","returnType":{"package":"s","name":"🌳🐚🔣","optional":false},"genericArguments":[],"documentation":" Returns an iterator to iterate over the symbols of this string. ","arguments":[]},{"name":"🔂🍡","access":"🔒","returnType":{"package":"s","name":"🍡🐚🔣","optional":false},"genericArguments":[],"arguments":[]},{"name":"🐽🐽","access":"🔒","returnType":{"package":"s","name":"🔣","optional":true},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]},{"name":"😛😛","access":"🔒","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"other"}]}],"initializers":[{"name":"😯","access":"🔓","genericArguments":[],"documentation":" Prompts the user for input. (via the standard input\/output) ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"prompt"}]},{"name":"🎙","access":"🔓","genericArguments":[],"documentation":" Creates a string from the given list of symbols. ","arguments":[{"type":{"package":"s","name":"🍨🐚🔣","optional":false},"name":"symbolList"}]},{"name":"🍨","access":"🔓","genericArguments":[],"documentation":"\n    Creates a string by joining all elements into a string sepearted\n    by *separator*.\n  ","arguments":[{"type":{"package":"s","name":"🍨🐚🔡","optional":false},"name":"list"},{"type":{"package":"s","name":"🔡","optional":false},"name":"separator"}]}],"typeMethods":[]},{"name": "🍨","conformsTo":[{"package":"s","name":"🔂🐚Element","optional":false},{"package":"s","name":"🐽🐚Element","optional":false}],"genericArguments":[{"name":"Element","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  The 🍨 class represents an ordered mutable collection. [Read more in the\n  language reference.](..\/..\/reference\/the-s-package.html#-lists)\n","methods":[{"name":"🐮","access":"🔓","returnType":{"package":"s","name":"🍨🐚Element","optional":false},"genericArguments":[],"documentation":" Returns a shallow copy of this list. ","arguments":[]},{"name":"🐻","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Appends `item` to the end of the list in `O(1)`. ","arguments":[{"type":{"package":"","name":"Element","optional":false},"name":"item"}]},{"name":"🐽","access":"🔓","returnType":{"package":"","name":"Element","optional":true},"genericArguments":[],"documentation":"\n    Gets the item at `index` in `O(1)`. If the index is invalid Nothingness is\n    returned.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]},{"name":"🐷","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Sets `value` at `index`. If `index` is bigger than the capacity of the list,\n    the list is resized to a capacity of `index + 1`. Complexity: `O(1)`.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"},{"type":{"package":"","name":"Element","optional":false},"name":"value"}]},{"name":"🐨","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":"\n    Removes the item at `index` and shifts all following items to the left in\n    `O(count - index)`.\n\n    Returns 👍 unless the index is out of range.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]},{"name":"🐵","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Inserts the given values before the element with the given index.\n\n    All items beginning from `index` are shifted to the right and `item` is\n    then inserted at `index`. Complexity: `O(count - index)`.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"},{"type":{"package":"","name":"Element","optional":false},"name":"item"}]},{"name":"🐔","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the number of items in the list. ","arguments":[]},{"name":"🐼","access":"🔓","returnType":{"package":"","name":"Element","optional":true},"genericArguments":[],"documentation":"\n    Removes the last item from the list and returns it in `O(1)`.\n    If the list is empty ✨ is returned.\n  ","arguments":[]},{"name":"🐗","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Removes all elements from the list but keeps the list’s capacity.\n\n    This can be much more efficient than using a new list. Complexity:\n    `O(count)`.\n  ","arguments":[]},{"name":"🐴","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Ensures that the list is large enoguh to store at least `capacity` elements.\n\n    You should use this method if you plan to heavily use 🐷 with large indices\n    in order to avoid automatic, useless allocations.\n\n    Complexity: `O(1)`.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"capacity"}]},{"name":"🦁","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Sorts this array in place using the quick sort algorithm.\n\n    `comparator` must return an integer less than, equal to, or greater than 0,\n    if the first argument is considered respectively less than, equal to, or\n    greater than the second.\n  ","arguments":[{"type":{"package":"","name":"🍇ElementElement➡️🚂🍉","optional":false},"name":"comparator"}]},{"name":"🐹","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Shuffles the list in place.\n  ","arguments":[]},{"name":"🐰","access":"🔓","returnType":{"package":"s","name":"🍨🐚A","optional":false},"genericArguments":[{"name":"A","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n    Calls callback with each element in the list and appends the returned\n    value to the end of a new list.\n  ","arguments":[{"type":{"package":"","name":"🍇Element➡️A🍉","optional":false},"name":"callback"}]},{"name":"🐭","access":"🔓","returnType":{"package":"s","name":"🍨🐚Element","optional":false},"genericArguments":[],"documentation":"\n    Returns a new array with all elements that pass the test implemented by\n    `callback`.\n  ","arguments":[{"type":{"package":"","name":"🍇Element➡️👌🍉","optional":false},"name":"callback"}]},{"name":"🐯","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":"\n    Tests whether all elements in the array pass the test implemented by\n    `callback`.\n\n    The method immdiately returns 👎 if `callback` returned 👎 for one element.\n  ","arguments":[{"type":{"package":"","name":"🍇Element➡️👌🍉","optional":false},"name":"callback"}]},{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[{"name":"A","constraint":{"package":"s","name":"😛🐚Element","optional":false}}],"documentation":" Tests whether this array and `other` are equal. ","arguments":[{"type":{"package":"s","name":"🍨🐚A","optional":false},"name":"other"}]},{"name":"🍡","access":"🔓","returnType":{"package":"s","name":"🌳🐚Element","optional":false},"genericArguments":[],"documentation":" Returns an iterator to iterate over the elements of this list. ","arguments":[]},{"name":"🔂🍡","access":"🔒","returnType":{"package":"s","name":"🍡🐚Element","optional":false},"genericArguments":[],"arguments":[]}],"initializers":[{"name":"🐸","access":"🔓","genericArguments":[],"documentation":" Creates an empty list. ","arguments":[]},{"name":"🐧","access":"🔓","genericArguments":[],"documentation":" Creates an empty list with the given initial capacity. ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"capacity"}]}],"typeMethods":[]},{"name": "📇","conformsTo":[{"package":"s","name":"🐽🐚🚂","optional":false},{"package":"s","name":"🔂🐚🚂","optional":false},{"package":"s","name":"😛🐚📇","optional":false}],"genericArguments":[],"documentation":" 📇 is an abstract interface to binary data. ","methods":[{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Returns 👍 if this is equal to b. ","arguments":[{"type":{"package":"s","name":"📇","optional":false},"name":"b"}]},{"name":"🐔","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the number of bytes represented by this instance. ","arguments":[]},{"name":"🐽","access":"🔓","returnType":{"package":"s","name":"🚂","optional":true},"genericArguments":[],"documentation":"\n    Returns an integer representing the value of the byte at the given index\n    `index`. A negative index is assumed to be relative to the end of the data.\n\n    This method treats the byte at the index as if it was an unsigned value, that is the front most\n    bit is also counted towards the value and does not indicate the sign. The value is therefore\n    always positive.\n\n    Nothingness is returned if the index is out of range.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]},{"name":"🔡","access":"🔓","returnType":{"package":"s","name":"🔡","optional":true},"genericArguments":[],"documentation":"\n    If this object represents the bytes of a UTF8 encoded text this method\n    returns a string representing that text. Nothingness is returned if this\n    object does not represent a valid UTF8 sequence.\n  ","arguments":[]},{"name":"🔪","access":"🔓","returnType":{"package":"s","name":"📇","optional":false},"genericArguments":[],"documentation":"\n    Returns a copy of the data within the given range. This method employes\n    various techniques to make this as efficient as possible.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"from"},{"type":{"package":"s","name":"🚂","optional":false},"name":"length"}]},{"name":"🔍","access":"🔓","returnType":{"package":"s","name":"🚂","optional":true},"genericArguments":[],"documentation":"\n    Finds the first occurrences of *search* in the bytes represented by this\n    instance. Search is done from left to right. Nothingness is returned if\n    *search* cannot be found. 0 is returned if *search* is empty.\n  ","arguments":[{"type":{"package":"s","name":"📇","optional":false},"name":"search"}]},{"name":"📝","access":"🔓","returnType":{"package":"s","name":"📇","optional":false},"genericArguments":[],"documentation":"\n    Creates a new data object by with the bytes of this instance and *b*\n    concatenated.\n  ","arguments":[{"type":{"package":"s","name":"📇","optional":false},"name":"b"}]},{"name":"🍡","access":"🔓","returnType":{"package":"s","name":"🌳🐚🚂","optional":false},"genericArguments":[],"documentation":" Returns an iterator to iterate over the bytes of this data object. ","arguments":[]},{"name":"🐽🐽","access":"🔒","returnType":{"package":"s","name":"🚂","optional":true},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]},{"name":"🔂🍡","access":"🔒","returnType":{"package":"s","name":"🍡🐚🚂","optional":false},"genericArguments":[],"arguments":[]},{"name":"😛😛","access":"🔒","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[{"type":{"package":"s","name":"📇","optional":false},"name":"other"}]}],"initializers":[],"typeMethods":[]},{"name": "🍯","conformsTo":[],"genericArguments":[{"name":"Element","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  The 🍯 class represents a dictionary. [Read more in the\n  language reference.](..\/..\/reference\/the-s-package.html#-dictionaries)\n","methods":[{"name":"🐽","access":"🔓","returnType":{"package":"","name":"Element","optional":true},"genericArguments":[],"documentation":"\n    Returns the value assigned to *key*. If key is not in the 🍯 ✨ is\n    returned.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"key"}]},{"name":"🐨","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Removes *key* and its assigned value from the 🍯. No action is performed if\n    *key* is not in the 🍯.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"key"}]},{"name":"🐷","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":" Adds a key-value pair. ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"key"},{"type":{"package":"","name":"Element","optional":false},"name":"object"}]},{"name":"🐙","access":"🔓","returnType":{"package":"s","name":"🍨🐚🔡","optional":false},"genericArguments":[],"documentation":"\n    Returns a list consisting of all keys in this 🍯.\n\n    >!N Note that the keys in the returned list are arbitrarily ordered.\n\n  ","arguments":[]},{"name":"🐗","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Removes all key-value pairs in this 🍯 and returns the number of deleted\n    items.\n  ","arguments":[]},{"name":"🐣","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Checks whether *key* is in this 🍯. ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"key"}]},{"name":"🐔","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the number of items. ","arguments":[]}],"initializers":[{"name":"🐸","access":"🔓","genericArguments":[],"documentation":" Creates an empty 🍯. ","arguments":[]}],"typeMethods":[]},{"name": "🍇","conformsTo":[],"genericArguments":[],"methods":[],"initializers":[],"typeMethods":[]},{"name": "🌳","conformsTo":[{"package":"s","name":"🍡🐚Element","optional":false},{"package":"s","name":"🔂🐚Element","optional":false}],"genericArguments":[{"name":"Element","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  Iterator over a 🐽. This class is an iterator that can iterate over\n  every type that conforms to the 🐽 protocol.\n","methods":[{"name":"🔽","access":"🔓","returnType":{"package":"","name":"Element","optional":false},"genericArguments":[],"arguments":[]},{"name":"❓","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[]},{"name":"🍡","access":"🔓","returnType":{"package":"s","name":"🍡🐚Element","optional":false},"genericArguments":[],"arguments":[]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"arguments":[{"type":{"package":"s","name":"🐽🐚Element","optional":false},"name":"iteratee"}]}],"typeMethods":[]},{"name": "🌱","conformsTo":[{"package":"s","name":"🍡🐚Element","optional":false},{"package":"s","name":"🔂🐚Element","optional":false}],"genericArguments":[{"name":"Element","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  Iterator over a 🍨. This iterator does *not* unwrap any values retrieved from\n  the list and therefore returns optionals. You can use [[🌳]] to have\n\toptionals automatically unwrapped.\n","methods":[{"name":"🔽","access":"🔓","returnType":{"package":"","name":"Element","optional":true},"genericArguments":[],"arguments":[]},{"name":"❓","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"arguments":[]},{"name":"🚯","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Removes the element last returned by 🔽 from the list. Calling this method\n    before having called 🔽 results in undefined behavior.\n  ","arguments":[]},{"name":"🍡","access":"🔓","returnType":{"package":"s","name":"🍡🐚Element","optional":false},"genericArguments":[],"arguments":[]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"arguments":[{"type":{"package":"s","name":"🍨🐚Element","optional":false},"name":"iteratee"}]}],"typeMethods":[]},{"name": "💻","conformsTo":[],"genericArguments":[],"documentation":"\n  💻 provides several class methods that can be used to interact with the\n  operating system. It cannot be instantiated.\n","methods":[],"initializers":[],"typeMethods":[{"name":"🎞","access":"🔓","returnType":{"package":"s","name":"🍨🐚🔡","optional":false},"genericArguments":[],"documentation":"\n    Returns a list of the arguments passed to the programm. Calling this method\n    is rather expensive.\n  ","arguments":[]},{"name":"🌳","access":"🔓","returnType":{"package":"s","name":"🔡","optional":true},"genericArguments":[],"documentation":"\n    Gets an environment variable by its name. If the variable cannot be found\n    ✨ is returned.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"variableName"}]},{"name":"🚪","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Immediately exits the program with the given status code. The code may\n    not be larger than 255 on most operating systems.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"status"}]},{"name":"🕴","access":"🔓","returnType":{"package":"s","name":"🔡","optional":true},"genericArguments":[],"documentation":"\n    Returns the standard output of running `command` in a subshell.\n  ","arguments":[{"type":{"package":"s","name":"🔡","optional":false},"name":"command"}]},{"name":"🌍","access":"🔓","returnType":{"package":"s","name":"🔡","optional":false},"genericArguments":[],"documentation":" Returns the current working directory. ","arguments":[]},{"name":"🕰","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Returns the current time in seconds since the Epoch in Greenwich Mean Time.\n  ","arguments":[]}]},{"name": "💈","conformsTo":[],"genericArguments":[],"documentation":"\n  Represents an execution thread of the program.\n","methods":[{"name":"🛂","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Blocks the calling thread until this thread has finished work.\n  ","arguments":[]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"documentation":"\n    Creates an new thread and calls the given callable `callable` on the newly\n    created thread.\n  ","arguments":[{"type":{"package":"","name":"🍇➡️✨🍉","optional":false},"name":"callable"}]}],"typeMethods":[{"name":"⏲","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Suspends the calling thread from execution for at least the number of\n    microseconds specified by the argument *microseconds*.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"microseconds"}]}]},{"name": "🔐","conformsTo":[],"genericArguments":[],"documentation":"\n  🔐 represents a mutex. A mutex is a simple semaphore that can be used to\n  coordinate access to shared data from multiple concurrent threads.\n","methods":[{"name":"🔒","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Attempts to lock the mutex and waits until it becomes available if it is\n    already locked.\n  ","arguments":[]},{"name":"🔓","access":"🔓","returnType":{"package":"","name":"✨","optional":false},"genericArguments":[],"documentation":"\n    Unlocks the mutex.\n  ","arguments":[]},{"name":"🔐","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":"\n    Attempts to lock the mutex and returns immediately. Returns 👍 if the mutex\n    could be locked.\n  ","arguments":[]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"documentation":"\n    Creates an new mutex.\n  ","arguments":[]}],"typeMethods":[]},{"name": "🎰","conformsTo":[],"genericArguments":[],"documentation":"\n  🎰 is a pseudo-random number generator. The default implementation relies on\n  the Mersenne Twister algorithm.\n","methods":[{"name":"🚂","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":"\n    Generates an integer. Integers are uniformly distributed on the\n    closed interval `[a, b]`.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"a"},{"type":{"package":"s","name":"🚂","optional":false},"name":"b"}]},{"name":"🚀","access":"🔓","returnType":{"package":"s","name":"🚀","optional":false},"genericArguments":[],"documentation":"\n    Generates a double, where doubles are uniformly distributed on the interval\n    `[0, 1)`.\n  ","arguments":[]}],"initializers":[{"name":"🆕","access":"🔓","genericArguments":[],"documentation":"\n    Creates a new generator and seeds it with a random value, if possible using\n    hardware entropy.\n  ","arguments":[]}],"typeMethods":[]}],"enums": [],"protocols":[{"name": "😛","conformsTo":[],"genericArguments":[{"name":"T","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  A type conforming to this protocol provides a method 😛 to determine whether\n  one of its instance is equal to an instance of type T, where T is normally the\n  type itself.\n","methods":[{"name":"😛","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":" Whether this value and *other* are equal. ","arguments":[{"type":{"package":"","name":"T","optional":false},"name":"other"}]}],"initializers":[],"typeMethods":[]},{"name": "🍡","conformsTo":[],"genericArguments":[{"name":"Element","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  🍡 can enumerate a collection and generates elements from the object it\n  enumerates.\n\n  To get the items from an iterator call the 🔽 method on it, until ❓ returns\n  👎 which indicates that there are no more items.\n","methods":[{"name":"🔽","access":"🔓","returnType":{"package":"","name":"Element","optional":false},"genericArguments":[],"documentation":"\n    Returns the next object. Expect undefined behavior if you call this method\n    when ❓ previously returned 👎.\n  ","arguments":[]},{"name":"❓","access":"🔓","returnType":{"package":"s","name":"👌","optional":false},"genericArguments":[],"documentation":"\n    Whether the enumerator has more elements to provide.\n  ","arguments":[]}],"initializers":[],"typeMethods":[]},{"name": "🔂","conformsTo":[],"genericArguments":[{"name":"Element","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  A type whose instances shall be enumerable using the 🔂 loop must\n  implement this protocol.\n","methods":[{"name":"🍡","access":"🔓","returnType":{"package":"s","name":"🍡🐚Element","optional":false},"genericArguments":[],"documentation":"\n    This method must return an instance of a class that conforms to\n    [[🍡]] which will be used to enumerate this instance.\n  ","arguments":[]}],"initializers":[],"typeMethods":[]},{"name": "🐽","conformsTo":[],"genericArguments":[{"name":"Element","constraint":{"package":"","name":"⚪️","optional":false}}],"documentation":"\n  A class whose elements can be accessed by 🐽. The number of elements must\n  be finite and returned by 🐔.\n","methods":[{"name":"🐽","access":"🔓","returnType":{"package":"","name":"Element","optional":true},"genericArguments":[],"documentation":"\n    Gets the item at `index`. If the index is invalid Nothingness is returned.\n  ","arguments":[{"type":{"package":"s","name":"🚂","optional":false},"name":"index"}]},{"name":"🐔","access":"🔓","returnType":{"package":"s","name":"🚂","optional":false},"genericArguments":[],"documentation":" Returns the number of items in the list. ","arguments":[]}],"initializers":[],"typeMethods":[]}]}